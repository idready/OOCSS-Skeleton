/**
* @author
* @date
* Define some useful mixins for converting px to EM or REM (Pixel, we loved You.)
**/



/** REM FONT SIZE WITH PX FALLBACK **/

/** Use of rem with pixel fallback **/
@mixin font-size($font-size){
  font-size: $font-size +px;
  font-size: $font-size / $base-font-size +rem;
}


/** REM TO PX CONVERSION WITH PX FALLBACK USEABLE WITH OTHER CSS PROPERTIES **/

/** http://gregrickaby.com/using-the-golden-ratio-and-rems/ **/

// Set your root font-size here
$root-font-size: 16;
$base-line-height: 28;

/* Functions used for the mixin */

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@function rem($value) {

  $root: $root-font-size;
  $val: parseInt($value);
  $return: ();

  @if unit($value) == "px" {
    $return: append($return, ($val / $root + rem));
  } @else {
    $return: append($return, ($val * $root + px));
  }

  @return $return;
}

/* Just a reminder: don't use this mixin with properties using percent as value */

@mixin rem($property, $values) {

  $px : ();
  $rem: ();

  $root: $root-font-size;

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else if type-of($value) == number {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / $root + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * $root + px));
        $rem: append($rem, $value);
      }
    }

    @else {
      $px : append($px,  $value);
      $rem: append($rem, $value);
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }

}
